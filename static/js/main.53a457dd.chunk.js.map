{"version":3,"sources":["contexts/ThemeContext.js","components/Navbar.js","components/TodoItem.js","components/TodoView.js","App.js","reportWebVitals.js","index.js"],"names":["ThemeContext","createContext","ThemeContextProvider","props","useState","localTheme","localStorage","getItem","isLightTheme","JSON","parse","light","text","accent","background","secondary","good","bad","dark","themeData","setthemeData","useEffect","setItem","stringify","Provider","value","toggleTheme","children","Navbar","Consumer","context","theme","style","color","backgroundColor","onClick","BulbOutlined","TodoItem","refId","todo","onDone","onDelete","useContext","className","done","CloseCircleFilled","CheckCircleFilled","TodoView","localTodos","todos","settodos","TodoAdd","AddTodo","todoText","TodoList","DeleteTodo","todoId","filter","val","id","DoneTodo","map","i","index","newTodo","setnewTodo","onSubmit","e","preventDefault","type","onChange","target","required","placeholder","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.53a457dd.chunk.js","sourcesContent":["import React, { createContext, useEffect, useState } from \"react\";\r\n\r\nexport const ThemeContext = createContext();\r\n\r\nexport default function ThemeContextProvider(props) {\r\n  const [themeData, setthemeData] = useState(\r\n    () => {\r\n      const localTheme = localStorage.getItem(\"isLightTheme\");\r\n      const _isLightTheme = localTheme ? JSON.parse(localTheme) : true;\r\n      return {\r\n        isLightTheme: _isLightTheme,\r\n        light: {\r\n          text: \"#2A2B2F\",\r\n          accent: \"#D0D0D0\",\r\n          background: \"#ECECEC\",\r\n          secondary: \"#E2DFDF\",\r\n          good: \"#35834F\",\r\n          bad: \"#B54141\"\r\n        },\r\n        dark: {\r\n          text: \"#DDD\",\r\n          accent: \"#121212\",\r\n          background: \"#222\",\r\n          secondary: \"#444444\",\r\n          good: \"#35834F\",\r\n          bad: \"#B54141\"\r\n        },\r\n      }\r\n    }\r\n  );\r\n\r\n  const ToggleTheme = () => {\r\n    setthemeData({ ...themeData, isLightTheme: !themeData.isLightTheme });\r\n  };\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem(\"isLightTheme\", JSON.stringify(themeData.isLightTheme));\r\n  }, [themeData])\r\n\r\n  return (\r\n    <ThemeContext.Provider value={{ ...themeData, toggleTheme: ToggleTheme }}>\r\n      {props.children}\r\n    </ThemeContext.Provider>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { ThemeContext } from \"../contexts/ThemeContext\";\r\nimport { BulbOutlined } from \"@ant-design/icons\";\r\n\r\nexport default function Navbar() {\r\n  return (\r\n    <ThemeContext.Consumer>\r\n      {(context) => {\r\n        const { isLightTheme, light, dark, toggleTheme } = context;\r\n        const theme = isLightTheme ? light : dark;\r\n\r\n        return (\r\n          <nav style={{ color: theme.text, backgroundColor: theme.secondary }}>\r\n            <h3>Todo App</h3>\r\n            <button\r\n              style={{ backgroundColor: theme.background }}\r\n              onClick={() => toggleTheme()}\r\n            >\r\n              <BulbOutlined style={{ color: theme.text }} />\r\n            </button>\r\n          </nav>\r\n        );\r\n      }}\r\n    </ThemeContext.Consumer>\r\n  );\r\n}\r\n","import React, { useContext } from \"react\";\r\nimport { ThemeContext } from \"../contexts/ThemeContext\";\r\nimport { CloseCircleFilled, CheckCircleFilled } from \"@ant-design/icons\";\r\n\r\nexport default function TodoItem({ refId, todo, onDone, onDelete }) {\r\n  const { isLightTheme, light, dark } = useContext(ThemeContext);\r\n  const theme = isLightTheme ? light : dark;\r\n  return (\r\n    <div\r\n      style={{ color: theme.text, backgroundColor: theme.accent }}\r\n      className={\"todo-item\" + (todo.done ? \" todo-done\" : \"\")}\r\n    >\r\n      <div className=\"todo-text\">{todo.text}</div>\r\n      <div className=\"todo-actions\">\r\n        <button onClick={() => onDelete(refId)}>\r\n          <CloseCircleFilled style={{ color: theme.bad }} />\r\n        </button>\r\n        <button onClick={() => onDone(refId)}>\r\n          <CheckCircleFilled style={{ color: theme.good }} />\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState, useContext, useEffect } from \"react\";\r\nimport { ThemeContext } from \"../contexts/ThemeContext\";\r\nimport TodoItem from \"./TodoItem\";\r\n\r\nexport default function TodoView() {\r\n  const [todos, settodos] = useState(() => {\r\n    const localTodos = localStorage.getItem(\"todos\");\r\n    return localTodos ? JSON.parse(localTodos) : [];\r\n  });\r\n\r\n  const { isLightTheme, light, dark } = useContext(ThemeContext);\r\n  const theme = isLightTheme ? light : dark;\r\n\r\n  const AddTodo = (todoText) => {\r\n    settodos([...todos, { text: todoText, done: false }]);\r\n  };\r\n  const DeleteTodo = (todoId) => {\r\n    settodos([...todos.filter((val, id) => val !== todos[todoId])]);\r\n  };\r\n\r\n  const DoneTodo = (todoId) => {\r\n    settodos([\r\n      ...todos.map((todo, i) => {\r\n        if (i === todoId) todo.done = true;\r\n        return todo;\r\n      }),\r\n    ]);\r\n  };\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem(\"todos\", JSON.stringify(todos));\r\n  }, [todos]);\r\n\r\n  return (\r\n    <div\r\n      style={{ color: theme.text, backgroundColor: theme.background }}\r\n      className=\"todo-view\"\r\n    >\r\n      <TodoAdd theme={theme} AddTodo={AddTodo} />\r\n      <TodoList\r\n        theme={theme}\r\n        DeleteTodo={DeleteTodo}\r\n        DoneTodo={DoneTodo}\r\n        todos={todos}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction TodoList({ theme, todos, DeleteTodo, DoneTodo }) {\r\n  return (\r\n    <div className=\"todo-list\">\r\n      <ul>\r\n        {todos.map((todo, index) => {\r\n          return (\r\n            <TodoItem\r\n              key={index}\r\n              refId={index}\r\n              todo={todo}\r\n              onDelete={DeleteTodo}\r\n              onDone={DoneTodo}\r\n            />\r\n          );\r\n        })}\r\n      </ul>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction TodoAdd({ theme, AddTodo }) {\r\n  const [newTodo, setnewTodo] = useState(\"\");\r\n  return (\r\n    <form\r\n      className=\"todo-add\"\r\n      onSubmit={(e) => {\r\n        e.preventDefault();\r\n        AddTodo(newTodo);\r\n        setnewTodo(\"\");\r\n      }}\r\n    >\r\n      <input\r\n        type=\"text\"\r\n        value={newTodo}\r\n        onChange={(e) => setnewTodo(e.target.value)}\r\n        required\r\n        placeholder=\"Type something...\"\r\n        style={{ color: theme.text, backgroundColor: theme.secondary }}\r\n      />\r\n      <button\r\n        style={{ color: theme.text, backgroundColor: theme.accent }}\r\n        type=\"submit\"\r\n      >\r\n        Add\r\n      </button>\r\n    </form>\r\n  );\r\n}\r\n","import Navbar from \"./components/Navbar\";\nimport TodoView from \"./components/TodoView\";\nimport ThemeContextProvider from \"./contexts/ThemeContext\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <ThemeContextProvider>\n        <Navbar />\n        <TodoView />\n      </ThemeContextProvider>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}